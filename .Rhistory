# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
runApp("my_app")
library(shiny)
runApp("NewShinyStart")
runApp("NewShinyApp")
runApp('R/NewShinyApp/NewShinyApp')
runApp('R/NewShinyApp/NewShinyApp')
runApp('R/NewShinyApp/NewShinyApp')
runApp('R/NewShinyApp/NewShinyApp')
runApp('R/NewShinyApp/NewShinyApp')
runApp('R/NewShinyApp/NewShinyApp')
runApp('R/NewShinyApp/NewShinyApp')
library(readr)
AnalyticsQuestionnairePitchData <- read_csv("R/AnalyticsQuestionnairePitchData.csv")
View(AnalyticsQuestionnairePitchData)
master <- read.csv("Master_Fall_2022.csv", header = TRUE)
master <- read.csv("AnalyticsQuestionnairePitchData", header = TRUE)
master <- read.csv("AnalyticsQuestionnairePitchData.csv", header = TRUE)
library(tidyverse)
library(shiny)
library(shinymanager)
library(dplyr)
library(ggplot2)
library(ggiraph)
library(broom)
library(DT)
library(gridExtra)
library(png)
library(bslib)
library(shinythemes)
library(fresh)
library(shinyscreenshot)
library(shinyjs)
master <- read.csv("AnalyticsQuestionnairePitchData.csv", header = TRUE)
m <- mean(AnalyticsQuestionnairePitchData$PitchId)
m
mound <- readPNG("Mound_Front.png", native = TRUE)
library(png)
pitch_data <- AnalyticsQuestionnairePitchData
mound <- readPNG("Mound_Front.png", native = TRUE)
library(tidyverse)
library(shiny)
library(shinymanager)
library(dplyr)
library(ggplot2)
library(ggiraph)
library(broom)
library(DT)
library(gridExtra)
library(png)
library(bslib)
library(shinythemes)
library(fresh)
library(shinyscreenshot)
library(shinyjs)
pitch_data <- AnalyticsQuestionnairePitchData
mound <- readPNG("Mound_Front.png", native = TRUE)
pitch_data <- AnalyticsQuestionnairePitchData
changeup <- pitch_data$PitchType == 'CH'
changeup
pitch_data <- AnalyticsQuestionnairePitchData
changeup <- if (pitch_data$PitchType == 'CH')
changeup
pitch_data <- AnalyticsQuestionnairePitchData
changeup <- c()
if (pitch_data$PitchType == 'CH')
{
changeup.add(pitch_data$PitchType)
}
changeup
pitch_data <- AnalyticsQuestionnairePitchData
changeup <- pitch_data$PitchType == 'CH'
changeup
shiny::runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
library(readr)
TestData <- read_csv("ShinyApp/TestData.csv")
View(TestData)
runApp('ShinyApp')
library(readr)
TestData <- read_csv("ShinyApp/TestData.csv")
View(TestData)
runApp('ShinyApp')
library(readr)
TestData <- read_csv("ShinyApp/TestData.csv")
View(TestData)
runApp('ShinyApp')
runApp('ShinyApp')
team_data
team_data
input
runApp('ShinyApp')
runApp('ShinyApp')
shiny::runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
# Subset for game 1
game1_data <- pitch_data[pitch_data$GamePk == 1,]
# Load the required libraries
library(ggplot2)
library(gridExtra)
library(scales)
# Load the data from the provided file
pitch_data <- read.csv("AnalyticsQuestionnairePitchData.csv")
# remove rows with missing values in PitchType column
pitch_data = pitch_data[pitch_data$PitchType != "NULL", ]
# Subset for game 1
game1_data <- pitch_data[pitch_data$GamePk == 1,]
# Subset for game 2
game2_data <- pitch_data[pitch_data$GamePk == 2,]
# List of game data
game_list <- list(game1_data, game2_data)
# Define colors for each pitch type
pitch_colors <- c("FF" = "red", "SL" = "blue", "CU" = "green", "CH" = "orange",
"FC" = "purple", "SI" = "pink", "KC" = "yellow")
# Create a list to store the plots
plots_list <- list()
# Plot a graphs for each pitcher for each game
for (game in game_list){
game_number <- unique(game$GamePk)
for (pid in unique(game$PitcherId)) {
pid_data <- game[game$PitcherId == pid, ]
pid_data <- subset(pid_data, !is.na(PitchType))
# Plot a histogram of pitch speeds
velo_plot <- ggplot(pid_data, aes(x = ReleaseSpeed, fill = PitchType)) +
geom_histogram(binwidth = 1) +
scale_fill_manual(values = pitch_colors) +
labs(title = "Pitch Speeds by Pitch Type",
x = "Pitch Speed (mph)",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.3))
# Plot a graph of spin rates
spinrate_plot <- ggplot(pid_data, aes(x = ReleaseExtension, y = ReleaseSpinRate, color = PitchType)) +
geom_point() +
scale_color_manual(values = pitch_colors) +
labs(title = "Extension vs. Spin Rate",
x = "Extension (ft)",
y = "Spin Rate (rpm)")+
theme(plot.title = element_text(hjust = 0.3))
# Plot a graph of vertical/horizontal break
vertical_break_plot <- ggplot(pid_data, aes(x = PitchType, y = TrajectoryVerticalBreakInduced*12, color = PitchType)) +
geom_boxplot() +
scale_color_manual(values = pitch_colors) +
labs(title = "Vertical Break by Pitch Type",
x = "Pitch Type",
y = "Vertical Break (in)")+
theme(plot.title = element_text(hjust = 0.3))
horizontal_break_plot <- ggplot(pid_data, aes(x = PitchType, y = TrajectoryHorizontalBreak*12, color = PitchType)) +
geom_boxplot() +
scale_color_manual(values = pitch_colors) +
labs(title = "Horizontal Break by Pitch Type",
x = "Pitch Type",
y = "Horizontal Break (in)")+
theme(plot.title = element_text(hjust = 0.3))
# Plot a graph of release points
release_plot <- ggplot(pid_data, aes(x = ReleasePositionX, y = ReleaseAngle, color = PitchType)) +
geom_point() +
scale_color_manual(values = pitch_colors) +
labs(title = "Release Position vs. Angle",
x = "Horizontal Location (ft)",
y = "Release Angle",
color = "Pitch Type")+
theme(plot.title = element_text(hjust = 0.3))
# Plot a graph of the pitch location
strike_zone_plot <- ggplot(pid_data, aes(x = TrajectoryLocationX, y = TrajectoryLocationZ, color = PitchType)) +
geom_point(size = 2) +
scale_color_manual(values = pitch_colors) +
geom_rect(aes(xmin = -0.83, xmax = 0.83, ymin = 1.5, ymax = 3.5), fill = NA, color = "black") +
labs(title = "Strike Zone Plot",
x = "X Location",
y = "Y Location",
color = "Pitch Type") +
theme(plot.title = element_text(hjust = 0.3)) + xlim(-2.75, 2.75) + ylim(-0.25, 4.75)
# Plot a pitch location heat map
total_obs <- nrow(pid_data)
pitch_heat_map <- ggplot(pid_data, aes(x = TrajectoryLocationX, y = TrajectoryLocationZ)) +
geom_bin2d(binwidth = c(0.5,0.5), aes(fill = round(..count../total_obs*100))) +
geom_rect(aes(xmin = -0.83, xmax = 0.83, ymin = 1.5, ymax = 3.5), fill = NA, color = "black") +
scale_fill_gradient(low = "white", high = "red", name = "Count (%)") +
labs(title = "Pitch Location Heat Map",
x = "X Location",
y = "Y Location",
fill = "Count") +
theme(plot.title = element_text(hjust = 0.3)) + xlim(-2.75, 2.75) + ylim(-0.25, 4.75)
# Plot a graph of pitch type usage
pitch_usage <- ggplot(pid_data, aes(x = PitchType, fill = PitchType)) +
geom_bar() +
scale_fill_manual(values = pitch_colors) +
labs(title = "Pitch Type Usage",
x = "Pitch Type",
y = "Count") +
theme(plot.title = element_text(hjust = 0.3))
# Add the plots to the list of plots
plots_list[[length(plots_list)+1]] <- velo_plot
plots_list[[length(plots_list)+1]] <- spinrate_plot
plots_list[[length(plots_list)+1]] <- vertical_break_plot
plots_list[[length(plots_list)+1]] <- horizontal_break_plot
plots_list[[length(plots_list)+1]] <- release_plot
plots_list[[length(plots_list)+1]] <- strike_zone_plot
plots_list[[length(plots_list)+1]] <- pitch_heat_map
plots_list[[length(plots_list)+1]] <- pitch_usage
# Combine the plots using grid.arrange()
grid.arrange(grobs = plots_list, ncol = 1, layout_matrix = rbind(c(1,2), c(3,4), c(5,6), c(7,8)),
bottom = NULL,
top = paste("Pitching Analysis for pitcher", pid, "in Game", game_number),
left = NULL, right = NULL)
# Empty the lists
plots_list <- list()
}
}
library(shiny)
ui <- fluidPage(
selectInput("firstInput", "First Option:", choices = c("Option 1", "Option 2")),
selectInput("secondInput", "Second Option:", choices = NULL),
selectInput("thirdInput", "Third Option:", choices = NULL)
)
server <- function(input, output, session) {
observeEvent(input$firstInput, {
# When the firstInput value changes, update the choices of the secondInput
if (input$firstInput == "Option 1") {
updateSelectInput(session, "secondInput", choices = c("a", "b", "c", "d"))
} else {
updateSelectInput(session, "secondInput", choices = c("g", "h", "i", "j"))
}
})
observeEvent(input$secondInput, {
# When the secondInput value changes, update the choices of the thirdInput
if (input$firstInput == "Option 1") {
updateSelectInput(session, "thirdInput", choices = c("e", "f"))
} else {
updateSelectInput(session, "thirdInput", choices = c("k", "l"))
}
})
}
shinyApp(ui, server)
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp()
runApp('ShinyApp')
runApp('ShinyApp')
runApp('test_shiny.R')
runApp('test_shiny.R')
runApp('test_shiny.R')
runApp('ShinyApp')
runApp('ShinyApp/test_shiny.R')
runApp('ShinyApp/test_shiny.R')
runApp('ShinyApp/test_shiny.R')
runApp('ShinyApp')
shiny::runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp/test_shiny.R')
runApp('ShinyApp/test_shiny.R')
runApp('ShinyApp/test_shiny.R')
runApp('ShinyApp/test_shiny.R')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
library(readr)
Master_Fall_2022 <- read_csv("ShinyApp/Master_Fall_2022.csv")
View(Master_Fall_2022)
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp()
runApp()
runApp()
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('R/spartan-savant_files')
runApp('R/spartan-savant_files')
install.packages(c("caret", "recipes"))
library(rpart)
library(caret)
library(rpart)
library(rpart)
library(caret)
library(mlbench)
install.packages("mlbench")
library(rpart)
library(caret)
library(recipes)
chooseCRANmirror()
installed.packages()
install.packages("recipes", dependencies = TRUE)
install.packages("recipes", dependencies = TRUE)
library(rpart)
library(caret)
library(recipes)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret)
> install.packages('recipes', dependencies = TRUE)
install.packages('recipes', dependencies = TRUE)
install.packages("recipes", dependencies = TRUE)
library(caret)
library(caret)
detach("package:caret", unload = TRUE)
library(caret)
detach("package:caret", unload = TRUE)
library(caret)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret)
install.packages('caret', dependencies=T)
install.packages("caret", dependencies = T)
library(caret)
install.packages("recipes", dependencies = T)
install.packages("recipes", dependencies = T)
library(recipes)
install.packages("recipes", repos = "http://cran.us.r-project.org")
install.packages("recipes", repos = "http://cran.us.r-project.org")
library(recipes)
install.packages(c("dplyr", "rlang", "tibble"))
install.packages(c("dplyr", "rlang", "tibble"))
install.packages("recipes")
install.packages("recipes")
library(recipes)
library(caret)
library(recipes)
library(caret)
library(caret)
install.packages("recipes")
library(caret)
library(recipes)
install.packages("recipes")
install.packages("recipes")
# Load required libraries
library(rpart)
# Split the data into training and testing sets (80% training, 20% testing)
set.seed(123) # For reproducibility
index <- sample(1:nrow(hockey_data), 0.8 * nrow(hockey_data))
train_data <- hockey_data[index, ]
test_data <- hockey_data[-index, ]
# Create the linear regression model
model <- lm(FinalPlay ~ Entry + Period + Name + Number + EntryType + Quadrant + TimeRem + PassComplete, data = train_data)
# Make predictions on the test set
predictions <- predict(model, test_data)
# Convert predicted values to binary based on a threshold (e.g., 0.5)
threshold <- 0.5
predicted_classes <- ifelse(predictions >= threshold, "Win", "Lose")
# Confusion matrix
conf_matrix <- table(predicted_classes, test_data$FinalPlay)
print(conf_matrix)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy:", accuracy))
# Split the data into training and testing sets (80% training, 20% testing)
set.seed(123) # For reproducibility
index <- sample(1:nrow(hockey_data), 0.8 * nrow(hockey_data))
# Load required libraries
library(rpart)
hockey_data <- read.csv("HockeyData.csv")
# Split the data into training and testing sets (80% training, 20% testing)
set.seed(123) # For reproducibility
index <- sample(1:nrow(hockey_data), 0.8 * nrow(hockey_data))
train_data <- hockey_data[index, ]
test_data <- hockey_data[-index, ]
# Create the linear regression model
model <- lm(FinalPlay ~ Entry + Period + Name + Number + EntryType + Quadrant + TimeRem + PassComplete, data = train_data)
# Make predictions on the test set
predictions <- predict(model, test_data)
# Convert predicted values to binary based on a threshold (e.g., 0.5)
threshold <- 0.5
predicted_classes <- ifelse(predictions >= threshold, "Win", "Lose")
# Confusion matrix
conf_matrix <- table(predicted_classes, test_data$FinalPlay)
print(conf_matrix)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy:", accuracy))
hockey_data <- read.csv("HockeyData.csv")
setwd("~/ShinyApp")
library(readr)
HockeyData <- read_csv("HockeyData.csv")
View(HockeyData)
# Load required libraries
library(rpart)
hockey_data <- read.csv("HockeyData.csv")
# Split the data into training and testing sets (80% training, 20% testing)
set.seed(123) # For reproducibility
index <- sample(1:nrow(hockey_data), 0.8 * nrow(hockey_data))
train_data <- hockey_data[index, ]
test_data <- hockey_data[-index, ]
# Create the linear regression model
model <- lm(FinalPlay ~ Entry + Period + Name + Number + EntryType + Quadrant + TimeRem + PassComplete, data = train_data)
# Make predictions on the test set
predictions <- predict(model, test_data)
# Convert predicted values to binary based on a threshold (e.g., 0.5)
threshold <- 0.5
predicted_classes <- ifelse(predictions >= threshold, "Win", "Lose")
# Confusion matrix
conf_matrix <- table(predicted_classes, test_data$FinalPlay)
print(conf_matrix)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy:", accuracy))
library(caret)
install.packages("lattice")
install.packages("lattice")
library(lattice)
library(caret)
update.packages()
library(caret)
install.packages(c("bit", "cachem", "checkmate", "class", "cli", "clock", "colorspace", "curl", "dbplyr", "digest", "dplyr", "fansi", "fastmap", "fs", "gargle", "googledrive", "googlesheets4", "haven", "htmltools", "httpuv", "igraph", "jsonlite", "KernSmooth", "later", "MASS", "Matrix", "matrixStats", "mgcv", "mvtnorm", "nnet", "openssl", "plyr", "Rcpp", "readr", "readxl", "rlang", "rstan", "sass", "spatial", "StanHeaders", "sys", "testthat", "tibble", "utf8", "V8", "vctrs", "vroom", "xml2"))
library(caret)
install.packages("recipes")
install.packages("recipes")
library(recipes)
library(caret)
R.version
R.version
sessionInfo()
update.packages(ask = FALSE)
library(caret)
library("caret")
install.packages("recipes")
install.packages("recipes")
library("caret")
library(recipes)
